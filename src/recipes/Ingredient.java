package recipes;

import utilities.UnitConversion;
import java.io.Serializable;

/**
 * Object class describing an Ingredient in a Recipe. An Ingredient contains a name, details on
 * itself (i.e. what it looks like or how it smells), the amount of that Ingredient required, and
 * the unit that amount is being measured in. Ingredients are immutable.
 * 
 * @version 3/28/2023 Version 1
 * @author Jack Milman, Meara Patterson, KichIntel
 *
 */
public class Ingredient implements Serializable, Comparable<Ingredient>
{
  private static final long serialVersionUID = 1L;

  private final String name;

  private final String details;

  private final double amount;

  private final Unit unit;

  /**
   * Constructs a new Ingredient.
   * 
   * @param name
   * @param details
   * @param amount
   * @param unit
   * @param calories
   * @param density
   * @param price
   */
  public Ingredient(final String name, final String details, final double amount, final Unit unit)
  {
    this.name = name;
    this.details = details;
    this.amount = amount;
    this.unit = unit;
  }

  /**
   * Gets the name of the Ingredient.
   * 
   * @return the name of the Ingredient
   */
  public String getName()
  {
    return name;
  }

  /**
   * Gets the details of the Ingredient.
   * 
   * @return the details of the Ingredient
   */
  public String getDetails()
  {
    return details;
  }

  /**
   * Gets the amount of the Ingredient.
   * 
   * @return the amount of the Ingredient
   */
  public double getAmount()
  {
    return amount;
  }

  /**
   * Gets the unit of the Ingredient.
   * 
   * @return the unit of the Ingredient
   */
  public Unit getUnit()
  {
    return unit;
  }

  /**
   * Gets the calories in the Ingredient per gram.
   * 
   * @return the calories of the Ingredient as a double
   */
  public double getCaloriesPerGram()
  {
    double amountInGrams = UnitConversion.convert(name, unit, Unit.GRAM, amount);
    double calPerGram = NutritionInfo.getCalPerGram(name);
    return amountInGrams * calPerGram;
  }

  /**
   * Gets the calories in the Ingredient per milliliter.
   * 
   * @return the calories of the Ingredient as a double
   */
  public double getCaloriesPerMilliliter()
  {
    return getCaloriesPerGram() * NutritionInfo.getGramPerML(name);
  }

  /**
   * Compares two Ingredients to see if they are equal. Two Ingredients are considered equal when
   * they have the same name and details.
   * 
   * @param other
   *          the object being compared to this Ingredient
   * @return true if the two Ingredients have the same name, or false if they do not
   */
  public boolean equals(final Object other)
  {
    if (other == this)
      return true;
    if (other == null)
      return false;
    if (other.getClass() != this.getClass())
      return false;

    Ingredient that = (Ingredient) other;
    if (this.name.equals(that.name))
      if (this.details.equals(that.details))
        return true;

    return false;
  }

  /**
   * Concatenates the name with the details and returns the result of that operation. Supported
   * because Ingredients are immutable.
   * 
   * @return the hash code generated by concatenating the name to the details
   */
  public int hashCode()
  {
    return (name + details).hashCode();
  }

  @Override
  public String toString()
  {
    
    // accounting for details like plural pinch being "pinches" not "pinchs"
    String result = "%.2f ";
    String strDetails = "";
    
    switch (unit.getName())
    {
      case "Pinch":
        result += "%ses of ";
        break;
      case "Individual":
        result += "%s ";
        break;
      case "":
        result += "%s";
        break;
      default:
        result += "%ss of ";
    }
    if (details != null)
    {
      strDetails = details;
      result += "%s %s";
    }
    else
    {
      result += "%s%s";
    }
    
    return String.format(result, amount, unit.getName().toLowerCase(), strDetails, name);

  }
  
  @Override
  public int compareTo(final Ingredient other)
  {
    return this.getName().substring(0, 1).compareTo(other.getName().substring(0, 1));
  }

}
